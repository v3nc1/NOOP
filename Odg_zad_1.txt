Zadatak 1.

- Zadarak smo riješili pomoæu SRP patterna. On nam omoguèava da je svaka 
klasa zadužena za jedanzadatak i u sluèaju promjene naèina 
ponašanja izmjene vršimo na klasi koja zahtijeva promjene.


Zadatak 2.

- Zadatak smo riješili pomoæu OCP patterna. Riješenje je odgovarajuæe jer 
smo dodali novu funkcionalnost bez da smo morali mijenjati kod u ostalim
klasama, kreirajuæi interface koji ima potpis odreðene funkcionalnosti.

Zadatak 3.

- U ovom zadatku je narušen LSP pattern, jer je aplikacija podložna 
pucanju koda kod klase koja nema odreðenu funkcionalnost. Stoga smo 
zadatak riješili dodavanjem interface kojim su proširene sve klase 
koje imaju istu funkcionalnost, a one koje nemaju nisu proširene.

Zadatak 4.

- Zadatak smo riješili na naèin da smo izdvojili zajednièke metode
u zaseban interface a individualne metode u druge interfacee koji 
æe moæi proširiti sve klase koje koriste navedene individualne metode.
Individualne metode nismo morali stavljati u drugi interface jer u ovom 
zadatku nemamo potrebu da se ijedna druga klasa proširuje individualnim
interfaceom ali u buduènosti ako nam zatreba ovako možemo iskoristiti 
taj individualni iterface za proširenje neke klase koja æe možda imati 
funkcionalnost generiranja više razlièitih kuhinja.

Zadatak 5.

- U riješenju sam omoguèio simulaciju svih tipova pilota. Jednostavno. :) 